import { Action, Ctx, On, Scene, SceneEnter } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { LLMSceneSession, WizardContext } from '../types/wizard-context.type';
import { ChatService } from 'src/chat/chat.service';
import { OpenrouterMessage } from 'src/openrouter/interfaces/openrouter.interface';

@Scene('quick-answer')
export class QuickAnswerWizardScene {
  constructor(private readonly chatService: ChatService) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: WizardContext) {
    this.initSession(ctx);

    await ctx.reply(
      'üîé –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:',
      Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]]),
    );
  }

  @On('text')
  async onMessage(@Ctx() ctx: WizardContext) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message
    if (!ctx.message) {
      return;
    }

    this.initSession(ctx);

    const session = this.getSession(ctx);
    if (!session) {
      return;
    }

    const text = 'text' in ctx.message ? ctx.message.text : '';

    if (!text) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.');
    }

    if (text === '/cancel') {
      await this.cancelOperation(ctx);
      return;
    }

    await ctx.sendMessage('ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å..');

    const userMessage: OpenrouterMessage = { role: 'user', content: text };
    session.messages.push(userMessage);

    const err_message =
      'üõë –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    try {
      const res = await this.chatService.getQuickAnswer('', session.messages);

      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–≤–æ–ª—ã MarkdownV2
      const markdownFixed = () => {
        return (
          res
            .replace(/\\/g, '\\\\')
            // eslint-disable-next-line no-useless-escape
            // .replace(/([_*\[\]()~`>#+\-=|{}\.!])/g, '\\$1')
            // eslint-disable-next-line no-useless-escape
            .replace(/([\[\]()~>#+\-=|{}\.!])/g, '\\$1')
            .replace(/\*{2,}/g, '*')
        );
      };

      const aiMessage: OpenrouterMessage = {
        role: 'assistant',
        content: res,
      };
      session.messages.push(aiMessage);

      await ctx.reply(markdownFixed() || err_message, {
        ...Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –í—ã–π—Ç–∏ —Å —á–∞—Ç–∞', 'cancel')],
        ]),
        parse_mode: 'MarkdownV2',
      });
      // await ctx.sendMessage(JSON.stringify(session.messages));
    } catch (e) {
      console.error(e);
      await ctx.reply(err_message);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
  @Action('cancel')
  async onCancelButton(@Ctx() ctx: WizardContext) {
    if (!ctx.callbackQuery) {
      return;
    }

    await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    await this.cancelOperation(ctx);
  }

  private async cancelOperation(ctx: WizardContext): Promise<void> {
    await ctx.reply(
      '‚¨ÖÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM.',
    );
    await ctx.scene.leave();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π
  private initSession(ctx: WizardContext): void {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ctx.scene –∏ ctx.scene.session
      if (!ctx.scene || typeof ctx.scene.session === 'undefined') {
        console.warn('Scene or scene.session is undefined');
        return;
      }

      const session = ctx.scene.session as Partial<LLMSceneSession>;

      if (!Array.isArray(session.messages)) {
        session.messages = [];
      }
    } catch (error) {
      console.error('Error initializing session:', error);
    }
  }

  private getSession(ctx: WizardContext): LLMSceneSession | null {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ctx.scene –∏ ctx.scene.session
      if (!ctx.scene || typeof ctx.scene.session === 'undefined') {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if (
        !ctx.scene.session ||
        typeof ctx.scene.session !== 'object' ||
        !('messages' in ctx.scene.session)
      ) {
        return null;
      }

      return ctx.scene.session as unknown as LLMSceneSession;
    } catch (error) {
      console.error('Error getting session:', error);
      return null;
    }
  }
}
