// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Пользователь
model User {
  id          Int       @id @default(autoincrement())

  // == ДАННЫЕ ИЗ TELEGRAM ==
  telegramId  String    @unique
  firstName   String
  lastName    String? 
  username    String?
  photoUrl    String? 
  chatInstance String

  // == ПРОФИЛЬ ПОЛЬЗОВАТЕЛЯ (по желанию) ==
  name        String?
  photo       String?

  // == ОСТАЛЬНЫЕ ДАННЫЕ ПОЛЬЗОВАТЕЛЯ ==
  role        Role      @default(USER) 
  // dialogs     Dialog[]  @relation("UserDialogs")
  lastAuth    DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  RefreshToken RefreshToken[]
  @@map("users")
  SupportTicket SupportTicket[] @relation("UserDialogs")
  Chat Chat[]
}

// Роли пользователей
enum Role {
  USER       // обычный пользователь
  ORG_USER   // пользователь организации
  ADMIN      // администратор
}

// Refresh токены
model RefreshToken {
  id              Int       @id @default(autoincrement())
  token           String    @unique
  jti             String    @unique
  createdAt       DateTime  @default(now())

  // связь к пользователю
  userId          Int
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

enum SupportTicketType {
  BUG_REPORT
  OTHER
}

model SupportTicket {
  id            Int       @id @default(autoincrement())
  type          SupportTicketType? 
  theme         String?
  description   String?
  finished      Boolean   @default(false)
  
  user          User      @relation("UserDialogs", fields: [userId], references: [id])
  userId         Int

  @@map("support_tickets")
}

// Список доступных LLM-моделей
model AiModel {
  id                 Int       @id @default(autoincrement())
  modelId            String    @unique // id модели в OpenRouter
  displayName        String
  description        String?
  isFree             Boolean   @default(false)
  pricePerMToken     Float     @default(0)       // стоимость токена (мб по запросам) 
  createdAt          DateTime  @default(now())
  canRecognizeImages Boolean   // может ли модель распознавать изображения
  maxContextLength   Int      // максимальная длина контекста в токенах
  // messages    Message[] // Связь с сообщениями, использующими эту LLM
  @@map("ai_models")
  Message Message[]
}

// Глобальные настройки сайта
model SiteSettings {
  id                 Int       @id @default(1)
  fastLLMAnswerModel String    @default("google/gemini-2.0-flash-exp:free")
  openRouterApiKey    String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

/// Диалоги
model Chat {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentChatId String?
  parentChat   Chat?     @relation("ChatHierarchy", fields: [parentChatId], references: [id], onDelete:Cascade)
  childBranches Chat[]   @relation("ChatHierarchy") // <-- Объяснено выше

  branchedAfterMessageId String? // <-- Объяснено выше

  messages  Message[]
  isArchived Boolean @default(false)
  publicLinks PublicLink[]

  PublicLink PublicLink[] @relation("ChatLinks")

  @@map("сhats")
}

/// Сообщения внутри диалогов
enum MessageSenderRole {
  USER
  AI
}
model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  content   String   @db.Text
  role      MessageSenderRole
  createdAt DateTime @default(now())

  llmId Int? // LLM для этого сообщения
  llm   AiModel?    @relation(fields: [llmId], references: [id], onDelete:SetNull)

  publicLinks PublicLink[]

  PublicLink PublicLink[] @relation("MessageLinks")

  @@map("messages")
}

/// Публичные ссылки для экспорта сообщения или чата
enum LinkType {
  CHAT
  MESSAGE
}

model PublicLink {
  id        String    @id @default(cuid())
  targetChatId String?
  targetChat   Chat?      @relation("ChatLinks", fields: [targetChatId], references: [id], onDelete:Cascade)
  
  targetMessageId String?
  targetMessage   Message?  @relation("MessageLinks", fields: [targetMessageId], references: [id], onDelete:Cascade)

  type      LinkType 
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  Chat Chat[]

  Message Message[]

  @@map("public_links")
}

/*
/// Загрузка файлов (картинки, документы)
model File {
  id           Int      @id @default(autoincrement())
  filename     String
  mimeType     String
  url          String   // путь или URL хранения
  sizeBytes    Int
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById Int
  message      Message? @relation()
  createdAt    DateTime @default(now())
}
*/